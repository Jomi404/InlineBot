from aiogram import Bot, Dispatcher
from aiogram.types import FSInputFile
import asyncio
import logging
from aiogram.types import Message
from aiogram import types
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
import config
import json
import re

API_TOKEN = config.TOKEN


class PostState(StatesGroup):
    waiting_state = State()
    choosing_caption = State()
    choosing_image = State()
    btn_input_caption = State()
    btn_input_url = State()
    btn_finish = State()
    btn_edit = State()
    btn_generate = State()
    btn_delete = State()


# main_menu
view_post = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç'
edit_post = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'

# edit_menu
change_text = '–û–ø–∏—Å–∞–Ω–∏–µ'
change_photo = '–§–æ—Ç–æ'
change_buttons = '–ö–Ω–æ–ø–∫–∏'
select_mode = '–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


def load_data_jsonfile():
    with open('./core/data/data.json', 'r', encoding='utf-8') as json_file:
        try:
            data = json.load(json_file)
        except:
            return None
    return data


def isDataNone():
    data = load_data_jsonfile()
    if data is None:
        posts = {}
    else:
        posts = data
    return posts


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–µ
posts = isDataNone()


async def save_data_infile():
    with open('./core/data/data.json', 'w') as json_file:
        json.dump(posts, json_file)


def get_main_keyboard():
    kb_obj = [
        [
            types.KeyboardButton(text=view_post),
            types.KeyboardButton(text=edit_post)
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_obj, resize_keyboard=True, )
    return keyboard


def get_editor_keyboard():
    kb_obj = [
        [
            types.KeyboardButton(text=change_text),
            types.KeyboardButton(text=change_photo),
            types.KeyboardButton(text=change_buttons),
            types.KeyboardButton(text=select_mode)
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_obj, resize_keyboard=True)
    return keyboard


async def get_dynamic_keyboard(KeyboardButtonList: list):
    keyboard = InlineKeyboardBuilder()
    line_button = []
    for lines_button in KeyboardButtonList:
        line_button.append(len(lines_button))
        for button in lines_button:
            text_button = button['text']
            url_button = button['url']
            callback_button = button['callback_data']
            keyboard.button(text=text_button, url=url_button, callback_data=callback_button)
    keyboard.adjust(*line_button)
    return keyboard


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–æ–º
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = get_main_keyboard()
    await message.answer('''–ü—Ä–∏–≤–µ—Ç! üëã

    ü§ñ –Ø –±–æ—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

    –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º:''',
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞"
@dp.message(F.text.lower() == view_post.lower())
async def view_mode(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in posts:
        await create_default_post(message.chat.id, user_id)
        await save_data_infile()
    await message.answer("–í–∞—à –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫. –í—ã–±–µ—Ä–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
    await send_post(message.chat.id, posts[user_id])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞
async def send_post(chat_id, post):
    caption_text = post.get('caption_text', '')
    url_photo = post.get('url_photo', '')
    InlineKeyboardB = post.get('inline_keyboard', [])
    photo = FSInputFile(url_photo)
    keyboard = await get_dynamic_keyboard(InlineKeyboardB)
    await bot.send_photo(chat_id, photo=photo, caption=caption_text, reply_markup=keyboard.as_markup())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async def create_default_post(chat_id, user_id):
    posts[user_id] = {"caption_text": "–í–∞—É! –≠—Ç–æ –ø–∞–Ω–¥–∞!",
                      "url_photo": "./core/resources/default.jpg",
                      "inline_keyboard": [
                          [
                              {
                                  'text': "Panda",
                                  'url': "https://www.youtube.com/watch?v=hAOoMtRstJ8",
                                  'callback_data': "btn0"
                              }
                          ]
                      ]}


@dp.message(F.text.lower() == edit_post.lower())
async def edit_mode(message: Message):
    user_id = str(message.from_user.id)
    keyboard = get_editor_keyboard()
    if user_id in posts:
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                             reply_markup=keyboard)
        await send_post(message.chat.id, posts[user_id])
    else:
        await create_default_post(message.chat.id, user_id)
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                             reply_markup=keyboard)
        await send_post(message.chat.id, posts[user_id])


@dp.message(F.text.lower() == select_mode.lower())
async def cmd_select_mode(message: types.Message, bot: Bot, state: FSMContext):
    keyboard = get_main_keyboard()
    chat_id_for_send = message.from_user.id
    await bot.send_message(chat_id_for_send, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º', reply_markup=keyboard)
    await state.set_state(None)


@dp.message(StateFilter(None), F.text.lower() == change_photo.lower())
async def start_edit_photo(message: Message, state: FSMContext):
    await message.answer(text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ç–æ"
    await state.set_state(PostState.choosing_image)


@dp.message(StateFilter(PostState.choosing_image), F.photo)
async def edit_photo(message: Message, state: FSMContext, bot: Bot):
    user_id = str(message.from_user.id)
    image_url = f"./core/resources/{message.photo[-1].file_id}.jpg"
    posts[user_id]['url_photo'] = image_url
    await save_data_infile()
    await bot.download(
        message.photo[-1],
        destination=image_url
    )
    await state.set_state(None)
    await send_post(message.chat.id, posts[user_id])


@dp.message(StateFilter(PostState.choosing_image))
async def err_send_edit_img(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, text='–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
                                                      '–∫–∞—Ä—Ç–∏–Ω–∫—É.')


@dp.message(StateFilter(None), F.text.lower() == change_text.lower())
async def start_edit_caption(message: Message, state: FSMContext):
    await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞"
    await state.set_state(PostState.choosing_caption)


@dp.message(StateFilter(PostState.choosing_caption), F.text)
async def edit_caption(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    caption_text = message.text
    posts[user_id]['caption_text'] = caption_text  # save data
    await save_data_infile()
    await state.set_state(None)
    await send_post(message.chat.id, posts[user_id])


# —Å–º–∞–π–ª–∏–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç
@dp.message(StateFilter(PostState.choosing_caption))
async def err_send_edit_caption(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id,
                           text='–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞')


# edit_btn
add_btn = '–î–æ–±–∞–≤–∏—Ç—å'
save_btn = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
del_btn = '–£–¥–∞–ª–∏—Ç—å'


def get_editor_button():
    kb_obj = [
        [
            types.KeyboardButton(text=add_btn),
            types.KeyboardButton(text=save_btn),
            types.KeyboardButton(text=del_btn),
            types.KeyboardButton(text=select_mode)
        ],
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb_obj, resize_keyboard=True)
    return keyboard


temp_keyboard = {}


@dp.message(StateFilter(None), F.text.lower() == change_buttons.lower())
async def editing_btn(message: types.Message, bot: Bot, state: FSMContext):
    user_id = str(message.from_user.id)
    temp_keyboard[user_id] = posts[user_id]
    keyboard = get_editor_button()
    await bot.send_message(user_id, text='–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –Ω–∏–∂–µ',
                           reply_markup=keyboard)
    await state.set_state(PostState.btn_edit)


@dp.message(StateFilter(PostState.btn_edit), F.text.lower() == del_btn.lower())
async def del_btn_f(message: types.Message, bot: Bot, state: FSMContext):
    user_id = str(message.from_user.id)
    old_keyboard = await get_dynamic_keyboard(
        temp_keyboard[user_id]['inline_keyboard'])
    await bot.send_message(user_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n–°–µ–π—á–∞—Å –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏ '
                                         '–≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:',
                           reply_markup=old_keyboard.as_markup())
    await state.set_state(PostState.btn_delete)


@dp.message(StateFilter(PostState.btn_delete))
async def remove_btn(message: types.Message, bot: Bot, state: FSMContext):
    user_id = str(message.from_user.id)
    text_to_remove = message.text
    for key, value in temp_keyboard.items():
        if 'inline_keyboard' in value:
            for sublist in value['inline_keyboard']:
                for item in sublist:
                    if 'text' in item and item['text'] == text_to_remove:
                        sublist.remove(item)  # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–ø–∏—Å–∫–∞
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —Ç–∞–∫ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —É–∂–µ —É–¥–∞–ª–µ–Ω
                if not sublist:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    value['inline_keyboard'].remove(sublist)
            break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, —Ç–∞–∫ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

    new_keyboard = await get_dynamic_keyboard(
        temp_keyboard[user_id]['inline_keyboard'])

    is_btn = len(temp_keyboard[user_id]['inline_keyboard'])
    if is_btn == 0:
        await bot.send_message(user_id, text='–í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É"',
                               reply_markup=new_keyboard.as_markup())
    else:
        await bot.send_message(user_id, text='–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ '
                                             '—Å—Å—ã–ª–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:',
                               reply_markup=new_keyboard.as_markup())
    await state.set_state(None)


@dp.message(F.text.lower() == save_btn.lower())
async def save_btn_f(message: types.Message, bot: Bot, state: FSMContext):
    user_id = str(message.from_user.id)
    keyboard = get_editor_button()
    new_keyboard = await get_dynamic_keyboard(
        temp_keyboard[user_id]['inline_keyboard'])
    json_dump = new_keyboard.as_markup().model_dump_json()  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ json –Ω–æ–≤—É—é –∫–ª–∞–≤—É
    temp_json_dict = json.loads(json_dump)  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤—É—é –∫–ª–∞–≤—É
    posts[user_id]['inline_keyboard'] = temp_json_dict['inline_keyboard']
    await save_data_infile()
    await bot.send_message(user_id, text='–í–∞—à–∏ —Å—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=keyboard)
    await state.set_state(PostState.btn_edit)


@dp.message(StateFilter(PostState.btn_edit), F.text.lower() == add_btn.lower())
async def add_btn_f(message: types.Message, bot: Bot, state: FSMContext):
    user_id = str(message.from_user.id)
    keyboard = get_editor_button()
    await bot.send_message(user_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ URL-–∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ '
                                         '—ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n'
                                         '–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n'
                                         '–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com\n'
                                         '\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–∏–Ω —Ä—è–¥.\n'
                                         '–ü—Ä–º–µ—Ä:\n'
                                         '–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com | –ö–Ω–æ–ø–∫–∞ 2 - http://example2.com\n'
                                         '–ö–Ω–æ–ø–∫–∞ 3 - http://example3.com | –ö–Ω–æ–ø–∫–∞ 4 - http://example4.com',
                           reply_markup=keyboard)
    await state.set_state(PostState.btn_generate)


async def parse_string_to_dict(string):
    buttons = []
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é '|'
    parts = re.split(r'\s*\|\s*', string)
    for part in parts:
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ URL –ø–æ –¥–µ—Ñ–∏—Å—É –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        text, url = [x.strip() for x in part.split('-')]
        buttons.append({'text': text, 'url': url})
    return buttons


@dp.message(StateFilter(PostState.btn_generate))
async def generate_new_keyboard(message: types.Message, bot: Bot, state: FSMContext):
    user_id = str(message.from_user.id)
    input_string = message.text
    new_btn = []
    test_btn = []
    button_list = []
    if '\n' in input_string:
        temp_btn = input_string.split('\n')
        for item in temp_btn:
            new_btn.append(re.split(r'\s*\|\s*', item))
    else:
        new_btn.append(re.split(r'\s*\|\s*', input_string))

    number_lines = len(new_btn)
    is_btn = len(posts[user_id]['inline_keyboard'])
    number_btn_row = []
    number_btn_row.append(is_btn)
    for item in new_btn:
        number_btn_row.append(len(item))
        for it in item:
            test_btn.append(it.replace(' ', '').split('-'))

    for text, url in test_btn:
        button_list.append({'text': text, 'url': url, 'callback_data': 'callback_data'})

    old_keyboard = await get_dynamic_keyboard(
        posts[user_id]['inline_keyboard'])

    for lines_button in button_list:
        text_button = lines_button['text']
        url_button = lines_button['url']
        callback_button = lines_button['callback_data']
        old_keyboard.button(text=text_button, url=url_button, callback_data=callback_button)
    old_keyboard.adjust(*number_btn_row)
    print(number_btn_row)
    json_test = old_keyboard.as_markup().model_dump_json()  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ json –Ω–æ–≤—É—é –∫–ª–∞–≤—É
    temp_json_dict = json.loads(json_test)  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤—É—é –∫–ª–∞–≤—É
    temp_keyboard[user_id]['inline_keyboard'] = temp_json_dict['inline_keyboard']
    await state.set_state(PostState.btn_edit)
    await bot.send_message(message.from_user.id, text='–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ '
                                                      '—Å—Å—ã–ª–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:', reply_markup=old_keyboard.as_markup())


async def main():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - [%(levelname)s] - %(name)s'
                                                   '(%(filename)s).%(funcName)s(%(lineno)d) - %(message)s')
    # db.create_tables()
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
